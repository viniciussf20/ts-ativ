INTRODUCTION

1- TypeScript allows developers to add types to JavaScript.
2- JavaScript is a loosely typed language.

GET STARTED:
1- TSCONFIG.json

SIMPLE TYPES

1- 
Explicit
Implicit

2- let firstName = "Dylan";

3- let firstname: string = "Dylan";

TYPES:
1- let myVar: any;
2-let myVar: unknoW;

ARRAYS:
1- readonly

TUPLES:

1-false
2-let ourTuple: [string, boolean];


OBJECT TYPES:

1- string, string, number
2- const car: { type: string, Model?: string } = {type: "Toyota"};


ENUMS:
1-enum 
myEnum
 {myFirstConst,
mySecondConst};

2-enum 
myEnum
 {
  myFirstConst = "first",
  mySecondConst = "second"};

ALIASES E INTERFACES:

1- type carType = string

2-interface
 myInterface 
{
  myProp: string
}

3-interface myExtInterface Extends myInterface
{
myExtProp:  number
}


UNION

1-
function myFunc(myVar: string | number) 
{
  console.log(myVar)
}

FUNCTIONS:
1- functiojn my func(): string { 
return "learning is fun"

2- 
function myFunc(): void
 {
  console.log("Learning is Fun!");
} 

3- 
function myFunc(myVar1: string, myVar2: string) 
{
  return(myVar1 + myVar2);
}

4-function myFunc(myVar1: string, myVar2?: string)
{
  return(myVar1 + (myVar2 || ""));
}

CASTING:
1- let myVar: unknown = "Hello world!";
console.log((myVar as string).length);

2-let myVar: unknown = "Hello world!";
console.log((<string>myVar).length);

CLASSES:

1- class Person {
 private
 name: string;
 public constructor(name: string) {
  this.name = name;
 }
public
 getName(): string {
  return this.name;
 }
}


BASIC GENERICS:

1- function createPair
<typeX, typeY> (x: typeX, y: typeY): [typeX, typeY] 
{
 return [x, y];
}
console.log(createPair<string, number>('Meaning', 42));

UTILITY TYPES:

1- 
interface Person {
    age: number;
    firstName: string;
    lastName: string;
}

let kindPerson: Partial<Person> = {};

2- interface Person {
    age: number;
    firstName: string;
    lastName?: string;
}
            
let 
kindPerson
: 
Required<Person>=
{
    age: 1800,
    firstName: "Santa",
    lastName: "Claus"
}

3- Record<string, number> is equivalent to { [key: string]: number }
